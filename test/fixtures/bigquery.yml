### YamlMime:UniversalReference
items:
  - uid: '@google-cloud/bigquery!BigQuery:class'
    summary: >-
      In the following examples from this page and the other modules (`Dataset`<!-- -->, `Table`<!-- -->, etc.), we are
      going to be using a dataset from [data.gov](http://goo.gl/f2SXcb) of higher education institutions.


      We will create a table with the correct schema, import the public CSV file into that table, and query it for data.



      See [What is BigQuery?](https://cloud.google.com/bigquery/what-is-bigquery)
    example:
      - |-
        Install the client library with <a href="https://www.npmjs.com/">npm</a>:

        ```
        npm install @google-cloud/bigquery

        ```
      - |-
        Import the client library

        ```
        const {BigQuery} = require('@google-cloud/bigquery');

        ```
      - >-
        Create a client that uses <a
        href="https://cloud.google.com/docs/authentication/production#providing_credentials_to_your_application">Application
        Default Credentials (ADC)</a>:


        ```

        const bigquery = new BigQuery();


        ```
      - >-
        Create a client with <a
        href="https://cloud.google.com/docs/authentication/production#obtaining_and_providing_service_account_credentials_manually">explicit
        credentials</a>:


        ```

        const bigquery = new BigQuery({
          projectId: 'your-project-id',
          keyFilename: '/path/to/keyfile.json'
        });


        ```
      - |-
        Full quickstart example:
        ```
          // Imports the Google Cloud client library
          const {BigQuery} = require('@google-cloud/bigquery');

          async function createDataset() {
            // Creates a client
            const bigqueryClient = new BigQuery();

            // Create the dataset
            const [dataset] = await bigqueryClient.createDataset(datasetName);
            console.log(`Dataset ${dataset.id} created.`);
          }
          createDataset();

        ```
    name: BigQuery
    fullName: BigQuery
    langs:
      - typeScript
    type: class
    extends:
      - '@google-cloud/bigquery!BigQuery~0:complex'
    inheritance:
      - type: '@google-cloud/bigquery!BigQuery~1:complex'
    package: '@google-cloud/bigquery!'
    children:
      - '@google-cloud/bigquery!BigQuery:constructor(1)'
      - '@google-cloud/bigquery!BigQuery#createDataset:member(1)'
      - '@google-cloud/bigquery!BigQuery#createDataset:member(2)'
      - '@google-cloud/bigquery!BigQuery#createDataset:member(3)'
      - '@google-cloud/bigquery!BigQuery#createJob:member(1)'
      - '@google-cloud/bigquery!BigQuery#createJob:member(2)'
      - '@google-cloud/bigquery!BigQuery#createQueryJob:member(1)'
      - '@google-cloud/bigquery!BigQuery#createQueryJob:member(2)'
      - '@google-cloud/bigquery!BigQuery#createQueryStream:member'
      - '@google-cloud/bigquery!BigQuery#dataset:member(1)'
      - '@google-cloud/bigquery!BigQuery#date:member(1)'
      - '@google-cloud/bigquery!BigQuery.date:member(1)'
      - '@google-cloud/bigquery!BigQuery#datetime:member(1)'
      - '@google-cloud/bigquery!BigQuery.datetime:member(1)'
      - '@google-cloud/bigquery!BigQuery.decodeIntegerValue_:member(1)'
      - '@google-cloud/bigquery!BigQuery#geography:member(1)'
      - '@google-cloud/bigquery!BigQuery.geography:member(1)'
      - '@google-cloud/bigquery!BigQuery#getDatasets:member(1)'
      - '@google-cloud/bigquery!BigQuery#getDatasets:member(2)'
      - '@google-cloud/bigquery!BigQuery#getDatasets:member(3)'
      - '@google-cloud/bigquery!BigQuery#getDatasetsStream:member'
      - '@google-cloud/bigquery!BigQuery#getJobs:member(1)'
      - '@google-cloud/bigquery!BigQuery#getJobs:member(2)'
      - '@google-cloud/bigquery!BigQuery#getJobs:member(3)'
      - '@google-cloud/bigquery!BigQuery#getJobsStream:member'
      - '@google-cloud/bigquery!BigQuery.getTypeDescriptorFromProvidedType_:member(1)'
      - '@google-cloud/bigquery!BigQuery.getTypeDescriptorFromValue_:member(1)'
      - '@google-cloud/bigquery!BigQuery#int:member(1)'
      - '@google-cloud/bigquery!BigQuery.int:member(1)'
      - '@google-cloud/bigquery!BigQuery#job:member(1)'
      - '@google-cloud/bigquery!BigQuery#location:member'
      - '@google-cloud/bigquery!BigQuery.mergeSchemaWithRows_:member(1)'
      - '@google-cloud/bigquery!BigQuery#query:member(1)'
      - '@google-cloud/bigquery!BigQuery#query:member(2)'
      - '@google-cloud/bigquery!BigQuery#query:member(3)'
      - '@google-cloud/bigquery!BigQuery#query:member(4)'
      - '@google-cloud/bigquery!BigQuery#query:member(5)'
      - '@google-cloud/bigquery!BigQuery#query:member(6)'
      - '@google-cloud/bigquery!BigQuery#queryAsStream_:member(1)'
      - '@google-cloud/bigquery!BigQuery#time:member(1)'
      - '@google-cloud/bigquery!BigQuery.time:member(1)'
      - '@google-cloud/bigquery!BigQuery#timestamp:member(1)'
      - '@google-cloud/bigquery!BigQuery.timestamp:member(1)'
      - '@google-cloud/bigquery!BigQuery.valueToQueryParameter_:member(1)'
  - uid: '@google-cloud/bigquery!BigQuery:constructor(1)'
    summary: Constructs a new instance of the `BigQuery` class
    name: (constructor)(options)
    fullName: (constructor)(options)
    langs:
      - typeScript
    type: constructor
    syntax:
      content: 'constructor(options?: BigQueryOptions);'
      parameters:
        - id: options
          description: ''
          type:
            - '@google-cloud/bigquery!BigQueryOptions:interface'
  - uid: '@google-cloud/bigquery!BigQuery#createDataset:member(1)'
    summary: |-
      Create a dataset.

      See [Datasets: insert API Documentation](https://cloud.google.com/bigquery/docs/reference/v2/datasets/insert)
    example:
      - |-
        ```
        const {BigQuery} = require('@google-cloud/bigquery');
        const bigquery = new BigQuery();

        bigquery.createDataset('my-dataset', function(err, dataset, apiResponse)
        {});

        //-
        // If the callback is omitted, we'll return a Promise.
        //-
        bigquery.createDataset('my-dataset').then(function(data) {
          const dataset = data[0];
          const apiResponse = data[1];
        });
        ```
    name: 'createDataset(id, options)'
    fullName: 'createDataset(id, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'createDataset(id: string, options?: DatasetResource): Promise<DatasetResponse>;'
      return:
        type:
          - '@google-cloud/bigquery!BigQuery#createDataset~0:complex'
        description: '{<!-- -->Promise<Dataset>}'
      parameters:
        - id: id
          description: ID of the dataset to create.
          type:
            - string
        - id: options
          description: 'See a [Dataset resource](https://cloud.google.com/bigquery/docs/reference/v2/datasets#resource)<!-- -->.'
          type:
            - '@google-cloud/bigquery!DatasetResource:type'
  - uid: '@google-cloud/bigquery!BigQuery#createDataset:member(2)'
    name: 'createDataset(id, options, callback)'
    fullName: 'createDataset(id, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'createDataset(id: string, options: DatasetResource, callback: DatasetCallback): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: id
          description: ''
          type:
            - string
        - id: options
          description: ''
          type:
            - '@google-cloud/bigquery!DatasetResource:type'
        - id: callback
          description: ''
          type:
            - '@google-cloud/bigquery!DatasetCallback:type'
  - uid: '@google-cloud/bigquery!BigQuery#createDataset:member(3)'
    name: 'createDataset(id, callback)'
    fullName: 'createDataset(id, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'createDataset(id: string, callback: DatasetCallback): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: id
          description: ''
          type:
            - string
        - id: callback
          description: ''
          type:
            - '@google-cloud/bigquery!DatasetCallback:type'
  - uid: '@google-cloud/bigquery!BigQuery#createJob:member(1)'
    summary: >-
      Creates a job. Typically when creating a job you'll have a very specific task in mind. For this we recommend one
      of the following methods:


      -  -  -  -  - 


      However in the event you need a finer level of control over the job creation, you can use this method to pass in a
      raw [Job resource](https://cloud.google.com/bigquery/docs/reference/rest/v2/Job) object.


      See [Jobs Overview](https://cloud.google.com/bigquery/docs/reference/rest/v2/jobs) See [Jobs: insert API
      Documentation](https://cloud.google.com/bigquery/docs/reference/v2/jobs/insert)
    example:
      - |-
        ```
        const {BigQuery} = require('@google-cloud/bigquery');
        const bigquery = new BigQuery();

        const options = {
          configuration: {
            query: {
              query: 'SELECT url FROM `publicdata.samples.github_nested` LIMIT 100'
            }
          }
        };

        bigquery.createJob(options, function(err, job) {
          if (err) {
            // Error handling omitted.
          }

          job.getQueryResults(function(err, rows) {});
        });

        //-
        // If the callback is omitted, we'll return a Promise.
        //-
        bigquery.createJob(options).then(function(data) {
          const job = data[0];

          return job.getQueryResults();
        });
        ```
    name: createJob(options)
    fullName: createJob(options)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'createJob(options: JobOptions): Promise<JobResponse>;'
      return:
        type:
          - '@google-cloud/bigquery!BigQuery#createJob~0:complex'
        description: '{<!-- -->Promise<JobResponse>}'
      parameters:
        - id: options
          description: >-
            Object in the form of a [Job resource](https://cloud.google.com/bigquery/docs/reference/rest/v2/Job)<!--
            -->;
          type:
            - '@google-cloud/bigquery!JobOptions:type'
  - uid: '@google-cloud/bigquery!BigQuery#createJob:member(2)'
    name: 'createJob(options, callback)'
    fullName: 'createJob(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'createJob(options: JobOptions, callback: JobCallback): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: ''
          type:
            - '@google-cloud/bigquery!JobOptions:type'
        - id: callback
          description: ''
          type:
            - '@google-cloud/bigquery!JobCallback:type'
  - uid: '@google-cloud/bigquery!BigQuery#createQueryJob:member(1)'
    summary: >-
      Run a query as a job. No results are immediately returned. Instead, your callback will be executed with a
      [Job](xref:@google-cloud/bigquery!Job:class) object that you must ping for the results. See the Job documentation
      for explanations of how to check on the status of the job.


      See [Jobs: insert API Documentation](https://cloud.google.com/bigquery/docs/reference/v2/jobs/insert)
    example:
      - |-
        ```
        const {BigQuery} = require('@google-cloud/bigquery');
        const bigquery = new BigQuery();

        const query = 'SELECT url FROM `publicdata.samples.github_nested` LIMIT
        100';

        //-
        // You may pass only a query string, having a new table created to store
        the
        // results of the query.
        //-
        bigquery.createQueryJob(query, function(err, job) {});

        //-
        // You can also control the destination table by providing a
        // {@link Table} object.
        //-
        bigquery.createQueryJob({
          destination: bigquery.dataset('higher_education').table('institutions'),
          query: query
        }, function(err, job) {});

        //-
        // After you have run `createQueryJob`, your query will execute in a job.
        Your
        // callback is executed with a {@link Job} object so that you may
        // check for the results.
        //-
        bigquery.createQueryJob(query, function(err, job) {
          if (!err) {
            job.getQueryResults(function(err, rows, apiResponse) {});
          }
        });

        //-
        // If the callback is omitted, we'll return a Promise.
        //-
        bigquery.createQueryJob(query).then(function(data) {
          const job = data[0];
          const apiResponse = data[1];

          return job.getQueryResults();
        });
        ```
    name: createQueryJob(options)
    fullName: createQueryJob(options)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'createQueryJob(options: Query | string): Promise<JobResponse>;'
      return:
        type:
          - '@google-cloud/bigquery!BigQuery#createQueryJob~0:complex'
        description: '{<!-- -->Promise<JobResponse>}'
      parameters:
        - id: options
          description: >-
            The configuration object. This must be in the format of the
            [\`configuration.query\`](https://cloud.google.com/bigquery/docs/reference/rest/v2/Job#JobConfigurationQuery)
            property of a Jobs resource. If a string is provided, this is used as the query string, and all other
            options are defaulted.
          type:
            - '@google-cloud/bigquery!BigQuery#createQueryJob~1:complex'
  - uid: '@google-cloud/bigquery!BigQuery#createQueryJob:member(2)'
    name: 'createQueryJob(options, callback)'
    fullName: 'createQueryJob(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'createQueryJob(options: Query | string, callback: JobCallback): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: ''
          type:
            - '@google-cloud/bigquery!BigQuery#createQueryJob~2:complex'
        - id: callback
          description: ''
          type:
            - '@google-cloud/bigquery!JobCallback:type'
  - uid: '@google-cloud/bigquery!BigQuery#createQueryStream:member'
    name: createQueryStream
    fullName: createQueryStream
    langs:
      - typeScript
    type: property
    syntax:
      content: 'createQueryStream: (options?: Query | string) => ResourceStream<RowMetadata>;'
      return:
        type:
          - '@google-cloud/bigquery!BigQuery#createQueryStream~0:complex'
  - uid: '@google-cloud/bigquery!BigQuery#dataset:member(1)'
    summary: Create a reference to a dataset.
    example:
      - |-
        ```
        const {BigQuery} = require('@google-cloud/bigquery');
        const bigquery = new BigQuery();
        const dataset = bigquery.dataset('higher_education');
        ```
    name: 'dataset(id, options)'
    fullName: 'dataset(id, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'dataset(id: string, options?: DatasetOptions): Dataset;'
      return:
        type:
          - '@google-cloud/bigquery!~Dataset:class'
        description: '{<!-- -->Dataset<!-- -->}'
      parameters:
        - id: id
          description: ID of the dataset.
          type:
            - string
        - id: options
          description: Dataset options.
          type:
            - '@google-cloud/bigquery!DatasetOptions:interface'
  - uid: '@google-cloud/bigquery!BigQuery#date:member(1)'
    example:
      - |-
        ```
        const {BigQuery} = require('@google-cloud/bigquery');
        const date = BigQuery.date('2017-01-01');

        //-
        // Alternatively, provide an object.
        //-
        const date2 = BigQuery.date({
          year: 2017,
          month: 1,
          day: 1
        });
        ```
    name: date(value)
    fullName: date(value)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'date(value: BigQueryDateOptions | string): BigQueryDate;'
      return:
        type:
          - '@google-cloud/bigquery!BigQueryDate:class'
        description: '{<!-- -->BigQueryDate<!-- -->}'
      parameters:
        - id: value
          description: >-
            The date. If a string, this should be in the format the API describes: `YYYY-[M]M-[D]D`<!-- -->. Otherwise,
            provide an object.
          type:
            - '@google-cloud/bigquery!BigQuery#date~0:complex'
  - uid: '@google-cloud/bigquery!BigQuery.date:member(1)'
    summary: >-
      The `DATE` type represents a logical calendar date, independent of time zone. It does not represent a specific
      24-hour time period. Rather, a given DATE value represents a different 24-hour period when interpreted in
      different time zones, and may represent a shorter or longer day during Daylight Savings Time transitions.
    example:
      - |-
        ```
        const {BigQuery} = require('@google-cloud/bigquery');
        const bigquery = new BigQuery();
        const date = bigquery.date('2017-01-01');

        //-
        // Alternatively, provide an object.
        //-
        const date2 = bigquery.date({
          year: 2017,
          month: 1,
          day: 1
        });
        ```
    name: date(value)
    fullName: date(value)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static date(value: BigQueryDateOptions | string): BigQueryDate;'
      return:
        type:
          - '@google-cloud/bigquery!BigQueryDate:class'
        description: ''
      parameters:
        - id: value
          description: >-
            The date. If a string, this should be in the format the API describes: `YYYY-[M]M-[D]D`<!-- -->. Otherwise,
            provide an object.
          type:
            - '@google-cloud/bigquery!BigQuery.date~0:complex'
  - uid: '@google-cloud/bigquery!BigQuery#datetime:member(1)'
    name: datetime(value)
    fullName: datetime(value)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'datetime(value: BigQueryDatetimeOptions | string): BigQueryDatetime;'
      return:
        type:
          - '@google-cloud/bigquery!BigQueryDatetime:class'
        description: ''
      parameters:
        - id: value
          description: ''
          type:
            - '@google-cloud/bigquery!BigQuery#datetime~0:complex'
  - uid: '@google-cloud/bigquery!BigQuery.datetime:member(1)'
    summary: >-
      A `DATETIME` data type represents a point in time. Unlike a `TIMESTAMP`<!-- -->, this does not refer to an
      absolute instance in time. Instead, it is the civil time, or the time that a user would see on a watch or
      calendar.

       BigQuery\#datetime
    example:
      - |-
        ```
        const {BigQuery} = require('@google-cloud/bigquery');
        const bigquery = new BigQuery();
        const datetime = bigquery.datetime('2017-01-01 13:00:00');

        //-
        // Alternatively, provide an object.
        //-
        const datetime = bigquery.datetime({
          year: 2017,
          month: 1,
          day: 1,
          hours: 14,
          minutes: 0,
          seconds: 0
        });
        ```
    name: datetime(value)
    fullName: datetime(value)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static datetime(value: BigQueryDatetimeOptions | string): BigQueryDatetime;'
      return:
        type:
          - '@google-cloud/bigquery!BigQueryDatetime:class'
        description: ''
      parameters:
        - id: value
          description: >-
            The time. If a string, this should be in the format the API describes: `YYYY-[M]M-[D]D[
            [H]H:[M]M:[S]S[.DDDDDD]]`<!-- -->. Otherwise, provide an object.
          type:
            - '@google-cloud/bigquery!BigQuery.datetime~0:complex'
  - uid: '@google-cloud/bigquery!BigQuery.decodeIntegerValue_:member(1)'
    summary: Convert an INT64 value to Number.
    name: decodeIntegerValue_(value)
    fullName: decodeIntegerValue_(value)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static decodeIntegerValue_(value: IntegerTypeCastValue): number;'
      return:
        type:
          - number
        description: ''
      parameters:
        - id: value
          description: The INT64 value to convert.
          type:
            - '@google-cloud/bigquery!IntegerTypeCastValue:type'
  - uid: '@google-cloud/bigquery!BigQuery#geography:member(1)'
    name: geography(value)
    fullName: geography(value)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'geography(value: string): Geography;'
      return:
        type:
          - '@google-cloud/bigquery!Geography:class'
        description: ''
      parameters:
        - id: value
          description: ''
          type:
            - string
  - uid: '@google-cloud/bigquery!BigQuery.geography:member(1)'
    summary: |-
      A geography value represents a surface area on the Earth in Well-known Text (WKT) format.

       BigQuery\#geography
    example:
      - |-
        ```
        const {BigQuery} = require('@google-cloud/bigquery');
        const bigquery = new BigQuery();
        const geography = bigquery.geography('POINT(1, 2)');
        ```
    name: geography(value)
    fullName: geography(value)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static geography(value: string): Geography;'
      return:
        type:
          - '@google-cloud/bigquery!Geography:class'
        description: '{<!-- -->Geography<!-- -->}'
      parameters:
        - id: value
          description: The geospatial data.
          type:
            - string
  - uid: '@google-cloud/bigquery!BigQuery#getDatasets:member(1)'
    summary: |-
      List all or some of the datasets in your project.

      See [Datasets: list API Documentation](https://cloud.google.com/bigquery/docs/reference/v2/datasets/list)
    example:
      - |-
        ```
        const {BigQuery} = require('@google-cloud/bigquery');
        const bigquery = new BigQuery();

        bigquery.getDatasets(function(err, datasets) {
          if (!err) {
            // datasets is an array of Dataset objects.
          }
        });

        //-
        // To control how many API requests are made and page through the results
        // manually, set `autoPaginate` to `false`.
        //-
        function manualPaginationCallback(err, datasets, nextQuery, apiResponse) {
          if (nextQuery) {
            // More results exist.
            bigquery.getDatasets(nextQuery, manualPaginationCallback);
          }
        }

        bigquery.getDatasets({
          autoPaginate: false
        }, manualPaginationCallback);

        //-
        // If the callback is omitted, we'll return a Promise.
        //-
        bigquery.getDatasets().then(function(datasets) {});
        ```
    name: getDatasets(options)
    fullName: getDatasets(options)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getDatasets(options?: GetDatasetsOptions): Promise<DatasetsResponse>;'
      return:
        type:
          - '@google-cloud/bigquery!BigQuery#getDatasets~0:complex'
        description: '{<!-- -->Promise<DatasetsResponse>}'
      parameters:
        - id: options
          description: Configuration object.
          type:
            - '@google-cloud/bigquery!GetDatasetsOptions:type'
  - uid: '@google-cloud/bigquery!BigQuery#getDatasets:member(2)'
    name: 'getDatasets(options, callback)'
    fullName: 'getDatasets(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getDatasets(options: GetDatasetsOptions, callback: DatasetsCallback): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: ''
          type:
            - '@google-cloud/bigquery!GetDatasetsOptions:type'
        - id: callback
          description: ''
          type:
            - '@google-cloud/bigquery!DatasetsCallback:type'
  - uid: '@google-cloud/bigquery!BigQuery#getDatasets:member(3)'
    name: getDatasets(callback)
    fullName: getDatasets(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getDatasets(callback: DatasetsCallback): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: ''
          type:
            - '@google-cloud/bigquery!DatasetsCallback:type'
  - uid: '@google-cloud/bigquery!BigQuery#getDatasetsStream:member'
    name: getDatasetsStream
    fullName: getDatasetsStream
    langs:
      - typeScript
    type: property
    syntax:
      content: 'getDatasetsStream: (options?: GetDatasetsOptions) => ResourceStream<Dataset>;'
      return:
        type:
          - '@google-cloud/bigquery!BigQuery#getDatasetsStream~0:complex'
  - uid: '@google-cloud/bigquery!BigQuery#getJobs:member(1)'
    summary: |-
      Get all of the jobs from your project.

      See [Jobs: list API Documentation](https://cloud.google.com/bigquery/docs/reference/v2/jobs/list)
    example:
      - |-
        ```
        const {BigQuery} = require('@google-cloud/bigquery');
        const bigquery = new BigQuery();

        bigquery.getJobs(function(err, jobs) {
          if (!err) {
            // jobs is an array of Job objects.
          }
        });

        //-
        // To control how many API requests are made and page through the results
        // manually, set `autoPaginate` to `false`.
        //-
        function manualPaginationCallback(err, jobs, nextQuery, apiRespose) {
          if (nextQuery) {
            // More results exist.
            bigquery.getJobs(nextQuery, manualPaginationCallback);
          }
        }

        bigquery.getJobs({
          autoPaginate: false
        }, manualPaginationCallback);

        //-
        // If the callback is omitted, we'll return a Promise.
        //-
        bigquery.getJobs().then(function(data) {
          const jobs = data[0];
        });
        ```
    name: getJobs(options)
    fullName: getJobs(options)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getJobs(options?: GetJobsOptions): Promise<GetJobsResponse>;'
      return:
        type:
          - '@google-cloud/bigquery!BigQuery#getJobs~0:complex'
        description: '{<!-- -->Promise<GetJobsResponse>}'
      parameters:
        - id: options
          description: Configuration object.
          type:
            - '@google-cloud/bigquery!GetJobsOptions:type'
  - uid: '@google-cloud/bigquery!BigQuery#getJobs:member(2)'
    name: 'getJobs(options, callback)'
    fullName: 'getJobs(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getJobs(options: GetJobsOptions, callback: GetJobsCallback): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: ''
          type:
            - '@google-cloud/bigquery!GetJobsOptions:type'
        - id: callback
          description: ''
          type:
            - '@google-cloud/bigquery!GetJobsCallback:type'
  - uid: '@google-cloud/bigquery!BigQuery#getJobs:member(3)'
    name: getJobs(callback)
    fullName: getJobs(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getJobs(callback: GetJobsCallback): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: ''
          type:
            - '@google-cloud/bigquery!GetJobsCallback:type'
  - uid: '@google-cloud/bigquery!BigQuery#getJobsStream:member'
    name: getJobsStream
    fullName: getJobsStream
    langs:
      - typeScript
    type: property
    syntax:
      content: 'getJobsStream: (options?: GetJobsOptions) => ResourceStream<Job>;'
      return:
        type:
          - '@google-cloud/bigquery!BigQuery#getJobsStream~0:complex'
  - uid: '@google-cloud/bigquery!BigQuery.getTypeDescriptorFromProvidedType_:member(1)'
    summary: Return a value's provided type.
    name: getTypeDescriptorFromProvidedType_(providedType)
    fullName: getTypeDescriptorFromProvidedType_(providedType)
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        static getTypeDescriptorFromProvidedType_(providedType: string | ProvidedTypeStruct | ProvidedTypeArray):
        ValueType;
      return:
        type:
          - '@google-cloud/bigquery!ValueType:type'
        description: '{<!-- -->string<!-- -->} The valid type provided.'
      parameters:
        - id: providedType
          description: The type.
          type:
            - '@google-cloud/bigquery!BigQuery.getTypeDescriptorFromProvidedType_~0:complex'
  - uid: '@google-cloud/bigquery!BigQuery.getTypeDescriptorFromValue_:member(1)'
    summary: Detect a value's type.
    name: getTypeDescriptorFromValue_(value)
    fullName: getTypeDescriptorFromValue_(value)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static getTypeDescriptorFromValue_(value: unknown): ValueType;'
      return:
        type:
          - '@google-cloud/bigquery!ValueType:type'
        description: '{<!-- -->string<!-- -->} The type detected from the value.'
      parameters:
        - id: value
          description: The value.
          type:
            - unknown
  - uid: '@google-cloud/bigquery!BigQuery#int:member(1)'
    name: 'int(value, typeCastOptions)'
    fullName: 'int(value, typeCastOptions)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'int(value: string | number | IntegerTypeCastValue, typeCastOptions?: IntegerTypeCastOptions): BigQueryInt;'
      return:
        type:
          - '@google-cloud/bigquery!BigQueryInt:class'
        description: ''
      parameters:
        - id: value
          description: ''
          type:
            - '@google-cloud/bigquery!BigQuery#int~0:complex'
        - id: typeCastOptions
          description: ''
          type:
            - '@google-cloud/bigquery!IntegerTypeCastOptions:interface'
  - uid: '@google-cloud/bigquery!BigQuery.int:member(1)'
    summary: |-
      A BigQueryInt wraps 'INT64' values. Can be used to maintain precision.

       BigQuery\#int
    example:
      - |-
        ```
        const {BigQuery} = require('@google-cloud/bigquery');
        const bigquery = new BigQuery();

        const largeIntegerValue = Number.MAX_SAFE_INTEGER + 1;

        const options = {
          integerTypeCastFunction: value => value.split(),
        };

        const bqInteger = bigquery.int(largeIntegerValue, options);

        const customValue = bqInteger.valueOf();
        // customValue is the value returned from your `integerTypeCastFunction`.
        ```
    name: 'int(value, typeCastOptions)'
    fullName: 'int(value, typeCastOptions)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        static int(value: string | number | IntegerTypeCastValue, typeCastOptions?: IntegerTypeCastOptions):
        BigQueryInt;
      return:
        type:
          - '@google-cloud/bigquery!BigQueryInt:class'
        description: '{<!-- -->BigQueryInt<!-- -->}'
      parameters:
        - id: value
          description: The INT64 value to convert.
          type:
            - '@google-cloud/bigquery!BigQuery.int~0:complex'
        - id: typeCastOptions
          description: Configuration to convert value. Must provide an `integerTypeCastFunction` to handle conversion.
          type:
            - '@google-cloud/bigquery!IntegerTypeCastOptions:interface'
  - uid: '@google-cloud/bigquery!BigQuery#job:member(1)'
    summary: Create a reference to an existing job.
    example:
      - |-
        ```
        const {BigQuery} = require('@google-cloud/bigquery');
        const bigquery = new BigQuery();

        const myExistingJob = bigquery.job('job-id');
        ```
    name: 'job(id, options)'
    fullName: 'job(id, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'job(id: string, options?: JobOptions): Job;'
      return:
        type:
          - '@google-cloud/bigquery!~Job:class'
        description: '{<!-- -->Job<!-- -->}'
      parameters:
        - id: id
          description: ID of the job.
          type:
            - string
        - id: options
          description: Configuration object.
          type:
            - '@google-cloud/bigquery!JobOptions:type'
  - uid: '@google-cloud/bigquery!BigQuery#location:member'
    name: location
    fullName: location
    langs:
      - typeScript
    type: property
    syntax:
      content: 'location?: string;'
      return:
        type:
          - string
  - uid: '@google-cloud/bigquery!BigQuery.mergeSchemaWithRows_:member(1)'
    summary: Merge a rowset returned from the API with a table schema.
    name: 'mergeSchemaWithRows_(schema, rows, wrapIntegers, selectedFields)'
    fullName: 'mergeSchemaWithRows_(schema, rows, wrapIntegers, selectedFields)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        static mergeSchemaWithRows_(schema: TableSchema | TableField, rows: TableRow[], wrapIntegers: boolean |
        IntegerTypeCastOptions, selectedFields?: string[]): any[];
      return:
        type:
          - 'any[]'
        description: '{<!-- -->array<!-- -->} Fields using their matching names from the table''s schema.'
      parameters:
        - id: schema
          description: ''
          type:
            - '@google-cloud/bigquery!BigQuery.mergeSchemaWithRows_~0:complex'
        - id: rows
          description: ''
          type:
            - '@google-cloud/bigquery!BigQuery.mergeSchemaWithRows_~1:complex'
        - id: wrapIntegers
          description: >-
            Wrap values of 'INT64' type in [BigQueryInt](xref:@google-cloud/bigquery!BigQueryInt:class) objects. If a
            `boolean`<!-- -->, this will wrap values in [BigQueryInt](xref:@google-cloud/bigquery!BigQueryInt:class)
            objects. If an `object`<!-- -->, this will return a value returned by
            `wrapIntegers.integerTypeCastFunction`<!-- -->. Please see
            [IntegerTypeCastOptions](xref:@google-cloud/bigquery!IntegerTypeCastOptions:interface) for options
            descriptions.
          type:
            - '@google-cloud/bigquery!BigQuery.mergeSchemaWithRows_~2:complex'
        - id: selectedFields
          description: 'List of fields to return. If unspecified, all fields are returned.'
          type:
            - 'string[]'
  - uid: '@google-cloud/bigquery!BigQuery#query:member(1)'
    summary: |-
      Run a query scoped to your project. For manual pagination please refer to .

      See [Jobs: query API Documentation](https://cloud.google.com/bigquery/docs/reference/v2/jobs/query)
    example:
      - |-
        ```
        const {BigQuery} = require('@google-cloud/bigquery');
        const bigquery = new BigQuery();

        const query = 'SELECT url FROM `publicdata.samples.github_nested` LIMIT
        100';

        bigquery.query(query, function(err, rows) {
          if (!err) {
            // rows is an array of results.
          }
        });

        //-
        // Positional SQL parameters are supported.
        //-
        bigquery.query({
          query: [
            'SELECT url',
            'FROM `publicdata.samples.github_nested`',
            'WHERE repository.owner = ?'
          ].join(' '),

          params: [
            'google'
          ]
        }, function(err, rows) {});

        //-
        // Or if you prefer to name them, that's also supported.
        //-
        bigquery.query({
          query: [
            'SELECT url',
            'FROM `publicdata.samples.github_nested`',
            'WHERE repository.owner = @owner'
          ].join(' '),
          params: {
            owner: 'google'
          }
        }, function(err, rows) {});

        //-
        // Providing types for SQL parameters is supported.
        //-
        bigquery.query({
          query: [
            'SELECT url',
            'FROM `publicdata.samples.github_nested`',
            'WHERE repository.owner = ?'
          ].join(' '),

          params: [
            null
          ],

          types: ['string']
        }, function(err, rows) {});

        //-
        // If you need to use a `DATE`, `DATETIME`, `TIME`, or `TIMESTAMP` type in
        // your query, see {@link BigQuery#date}, {@link BigQuery#datetime},
        // {@link BigQuery#time}, and {@link BigQuery#timestamp}.
        //-

        //-
        // If the callback is omitted, we'll return a Promise.
        //-
        bigquery.query(query).then(function(data) {
          const rows = data[0];
        });
        ```
    name: 'query(query, options)'
    fullName: 'query(query, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'query(query: string, options?: QueryOptions): Promise<QueryRowsResponse>;'
      return:
        type:
          - '@google-cloud/bigquery!BigQuery#query~0:complex'
        description: '{<!-- -->Promise<!-- -->}'
      parameters:
        - id: query
          description: >-
            A string SQL query or configuration object. For all available options, see [Jobs: query request
            body](https://cloud.google.com/bigquery/docs/reference/v2/jobs/query#request-body)<!-- -->.
          type:
            - string
        - id: options
          description: Configuration object for query results.
          type:
            - '@google-cloud/bigquery!QueryOptions:type'
  - uid: '@google-cloud/bigquery!BigQuery#query:member(2)'
    name: 'query(query, options)'
    fullName: 'query(query, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'query(query: Query, options?: QueryOptions): Promise<SimpleQueryRowsResponse>;'
      return:
        type:
          - '@google-cloud/bigquery!BigQuery#query~1:complex'
        description: ''
      parameters:
        - id: query
          description: ''
          type:
            - '@google-cloud/bigquery!Query:type'
        - id: options
          description: ''
          type:
            - '@google-cloud/bigquery!QueryOptions:type'
  - uid: '@google-cloud/bigquery!BigQuery#query:member(3)'
    name: 'query(query, options, callback)'
    fullName: 'query(query, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'query(query: string, options: QueryOptions, callback?: QueryRowsCallback): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: query
          description: ''
          type:
            - string
        - id: options
          description: ''
          type:
            - '@google-cloud/bigquery!QueryOptions:type'
        - id: callback
          description: ''
          type:
            - '@google-cloud/bigquery!QueryRowsCallback:type'
  - uid: '@google-cloud/bigquery!BigQuery#query:member(4)'
    name: 'query(query, options, callback)'
    fullName: 'query(query, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'query(query: Query, options: QueryOptions, callback?: SimpleQueryRowsCallback): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: query
          description: ''
          type:
            - '@google-cloud/bigquery!Query:type'
        - id: options
          description: ''
          type:
            - '@google-cloud/bigquery!QueryOptions:type'
        - id: callback
          description: ''
          type:
            - '@google-cloud/bigquery!SimpleQueryRowsCallback:type'
  - uid: '@google-cloud/bigquery!BigQuery#query:member(5)'
    name: 'query(query, callback)'
    fullName: 'query(query, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'query(query: string, callback?: QueryRowsCallback): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: query
          description: ''
          type:
            - string
        - id: callback
          description: ''
          type:
            - '@google-cloud/bigquery!QueryRowsCallback:type'
  - uid: '@google-cloud/bigquery!BigQuery#query:member(6)'
    name: 'query(query, callback)'
    fullName: 'query(query, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'query(query: Query, callback?: SimpleQueryRowsCallback): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: query
          description: ''
          type:
            - '@google-cloud/bigquery!Query:type'
        - id: callback
          description: ''
          type:
            - '@google-cloud/bigquery!SimpleQueryRowsCallback:type'
  - uid: '@google-cloud/bigquery!BigQuery#queryAsStream_:member(1)'
    summary: >-
      This method will be called by `createQueryStream()`<!-- -->. It is required to properly set the `autoPaginate`
      option value.
    name: 'queryAsStream_(query, optionsOrCallback, cb)'
    fullName: 'queryAsStream_(query, optionsOrCallback, cb)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'queryAsStream_(query: Query, optionsOrCallback?: QueryStreamOptions, cb?: SimpleQueryRowsCallback): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: query
          description: ''
          type:
            - '@google-cloud/bigquery!Query:type'
        - id: optionsOrCallback
          description: ''
          type:
            - '@google-cloud/bigquery!QueryStreamOptions:type'
        - id: cb
          description: ''
          type:
            - '@google-cloud/bigquery!SimpleQueryRowsCallback:type'
  - uid: '@google-cloud/bigquery!BigQuery#time:member(1)'
    name: time(value)
    fullName: time(value)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'time(value: BigQueryTimeOptions | string): BigQueryTime;'
      return:
        type:
          - '@google-cloud/bigquery!BigQueryTime:class'
        description: ''
      parameters:
        - id: value
          description: ''
          type:
            - '@google-cloud/bigquery!BigQuery#time~0:complex'
  - uid: '@google-cloud/bigquery!BigQuery.time:member(1)'
    summary: |-
      A `TIME` data type represents a time, independent of a specific date.

       BigQuery\#time
    example:
      - |-
        ```
        const {BigQuery} = require('@google-cloud/bigquery');
        const bigquery = new BigQuery();
        const time = bigquery.time('14:00:00'); // 2:00 PM

        //-
        // Alternatively, provide an object.
        //-
        const time = bigquery.time({
          hours: 14,
          minutes: 0,
          seconds: 0
        });
        ```
    name: time(value)
    fullName: time(value)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static time(value: BigQueryTimeOptions | string): BigQueryTime;'
      return:
        type:
          - '@google-cloud/bigquery!BigQueryTime:class'
        description: ''
      parameters:
        - id: value
          description: >-
            The time. If a string, this should be in the format the API describes: `[H]H:[M]M:[S]S[.DDDDDD]`<!-- -->.
            Otherwise, provide an object.
          type:
            - '@google-cloud/bigquery!BigQuery.time~0:complex'
  - uid: '@google-cloud/bigquery!BigQuery#timestamp:member(1)'
    name: timestamp(value)
    fullName: timestamp(value)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'timestamp(value: Date | string): BigQueryTimestamp;'
      return:
        type:
          - '@google-cloud/bigquery!BigQueryTimestamp:class'
        description: ''
      parameters:
        - id: value
          description: ''
          type:
            - '@google-cloud/bigquery!BigQuery#timestamp~0:complex'
  - uid: '@google-cloud/bigquery!BigQuery.timestamp:member(1)'
    summary: >-
      A timestamp represents an absolute point in time, independent of any time zone or convention such as Daylight
      Savings Time.

       BigQuery\#timestamp
    example:
      - |-
        ```
        const {BigQuery} = require('@google-cloud/bigquery');
        const bigquery = new BigQuery();
        const timestamp = bigquery.timestamp(new Date());
        ```
    name: timestamp(value)
    fullName: timestamp(value)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static timestamp(value: Date | string): BigQueryTimestamp;'
      return:
        type:
          - '@google-cloud/bigquery!BigQueryTimestamp:class'
        description: '{<!-- -->BigQueryTimestamp<!-- -->}'
      parameters:
        - id: value
          description: The time.
          type:
            - '@google-cloud/bigquery!BigQuery.timestamp~0:complex'
  - uid: '@google-cloud/bigquery!BigQuery.valueToQueryParameter_:member(1)'
    summary: >-
      Convert a value into a `queryParameter` object.



      See [Jobs.query API Reference Docs (see
      \`queryParameters\`)](https://cloud.google.com/bigquery/docs/reference/rest/v2/jobs/query#request-body)
    name: 'valueToQueryParameter_(value, providedType)'
    fullName: 'valueToQueryParameter_(value, providedType)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        static valueToQueryParameter_(value: any, providedType?: string | ProvidedTypeStruct | ProvidedTypeArray):
        bigquery.IQueryParameter;
      return:
        type:
          - '@google-cloud/bigquery!~bigquery.IQueryParameter:type'
        description: '{<!-- -->object<!-- -->} A properly-formed `queryParameter` object.'
      parameters:
        - id: value
          description: The value.
          type:
            - any
        - id: providedType
          description: Provided query parameter type.
          type:
            - '@google-cloud/bigquery!BigQuery.valueToQueryParameter_~0:complex'
references:
  - uid: '@google-cloud/bigquery!BigQuery~0:complex'
    name: common.Service
    fullName: common.Service
    spec.typeScript:
      - name: common.
        fullName: common.
      - uid: '@google-cloud/common!Service:class'
        name: Service
        fullName: Service
  - uid: '@google-cloud/bigquery!BigQuery~1:complex'
    name: common.Service
    fullName: common.Service
    spec.typeScript:
      - name: common.
        fullName: common.
      - uid: '@google-cloud/common!Service:class'
        name: Service
        fullName: Service
  - uid: '@google-cloud/bigquery!BigQueryOptions:interface'
    name: BigQueryOptions
  - uid: '@google-cloud/bigquery!BigQuery#createDataset~0:complex'
    name: Promise<DatasetResponse>
    fullName: Promise<DatasetResponse>
    spec.typeScript:
      - uid: '!Promise:interface'
        name: Promise
        fullName: Promise
      - name: <
        fullName: <
      - uid: '@google-cloud/bigquery!DatasetResponse:type'
        name: DatasetResponse
        fullName: DatasetResponse
      - name: '>'
        fullName: '>'
  - uid: '@google-cloud/bigquery!DatasetResource:type'
    name: DatasetResource
  - uid: '@google-cloud/bigquery!DatasetCallback:type'
    name: DatasetCallback
  - uid: '@google-cloud/bigquery!BigQuery#createJob~0:complex'
    name: Promise<JobResponse>
    fullName: Promise<JobResponse>
    spec.typeScript:
      - uid: '!Promise:interface'
        name: Promise
        fullName: Promise
      - name: <
        fullName: <
      - uid: '@google-cloud/bigquery!JobResponse:type'
        name: JobResponse
        fullName: JobResponse
      - name: '>'
        fullName: '>'
  - uid: '@google-cloud/bigquery!JobOptions:type'
    name: JobOptions
  - uid: '@google-cloud/bigquery!JobCallback:type'
    name: JobCallback
  - uid: '@google-cloud/bigquery!BigQuery#createQueryJob~0:complex'
    name: Promise<JobResponse>
    fullName: Promise<JobResponse>
    spec.typeScript:
      - uid: '!Promise:interface'
        name: Promise
        fullName: Promise
      - name: <
        fullName: <
      - uid: '@google-cloud/bigquery!JobResponse:type'
        name: JobResponse
        fullName: JobResponse
      - name: '>'
        fullName: '>'
  - uid: '@google-cloud/bigquery!BigQuery#createQueryJob~1:complex'
    name: Query | string
    fullName: Query | string
    spec.typeScript:
      - uid: '@google-cloud/bigquery!Query:type'
        name: Query
        fullName: Query
      - name: ' | string'
        fullName: ' | string'
  - uid: '@google-cloud/bigquery!BigQuery#createQueryJob~2:complex'
    name: Query | string
    fullName: Query | string
    spec.typeScript:
      - uid: '@google-cloud/bigquery!Query:type'
        name: Query
        fullName: Query
      - name: ' | string'
        fullName: ' | string'
  - uid: '@google-cloud/bigquery!BigQuery#createQueryStream~0:complex'
    name: '(options?: Query | string) => ResourceStream<RowMetadata>'
    fullName: '(options?: Query | string) => ResourceStream<RowMetadata>'
    spec.typeScript:
      - name: '(options?: '
        fullName: '(options?: '
      - uid: '@google-cloud/bigquery!Query:type'
        name: Query
        fullName: Query
      - name: ' | string) => '
        fullName: ' | string) => '
      - uid: '@google-cloud/paginator!ResourceStream:class'
        name: ResourceStream
        fullName: ResourceStream
      - name: <
        fullName: <
      - uid: '@google-cloud/bigquery!RowMetadata:type'
        name: RowMetadata
        fullName: RowMetadata
      - name: '>'
        fullName: '>'
  - uid: '@google-cloud/bigquery!~Dataset:class'
    name: Dataset
  - uid: '@google-cloud/bigquery!DatasetOptions:interface'
    name: DatasetOptions
  - uid: '@google-cloud/bigquery!BigQueryDate:class'
    name: BigQueryDate
  - uid: '@google-cloud/bigquery!BigQuery#date~0:complex'
    name: BigQueryDateOptions | string
    fullName: BigQueryDateOptions | string
    spec.typeScript:
      - uid: '@google-cloud/bigquery!BigQueryDateOptions:interface'
        name: BigQueryDateOptions
        fullName: BigQueryDateOptions
      - name: ' | string'
        fullName: ' | string'
  - uid: '@google-cloud/bigquery!BigQuery.date~0:complex'
    name: BigQueryDateOptions | string
    fullName: BigQueryDateOptions | string
    spec.typeScript:
      - uid: '@google-cloud/bigquery!BigQueryDateOptions:interface'
        name: BigQueryDateOptions
        fullName: BigQueryDateOptions
      - name: ' | string'
        fullName: ' | string'
  - uid: '@google-cloud/bigquery!BigQueryDatetime:class'
    name: BigQueryDatetime
  - uid: '@google-cloud/bigquery!BigQuery#datetime~0:complex'
    name: BigQueryDatetimeOptions | string
    fullName: BigQueryDatetimeOptions | string
    spec.typeScript:
      - uid: '@google-cloud/bigquery!BigQueryDatetimeOptions:interface'
        name: BigQueryDatetimeOptions
        fullName: BigQueryDatetimeOptions
      - name: ' | string'
        fullName: ' | string'
  - uid: '@google-cloud/bigquery!BigQuery.datetime~0:complex'
    name: BigQueryDatetimeOptions | string
    fullName: BigQueryDatetimeOptions | string
    spec.typeScript:
      - uid: '@google-cloud/bigquery!BigQueryDatetimeOptions:interface'
        name: BigQueryDatetimeOptions
        fullName: BigQueryDatetimeOptions
      - name: ' | string'
        fullName: ' | string'
  - uid: '@google-cloud/bigquery!IntegerTypeCastValue:type'
    name: IntegerTypeCastValue
  - uid: '@google-cloud/bigquery!Geography:class'
    name: Geography
  - uid: '@google-cloud/bigquery!BigQuery#getDatasets~0:complex'
    name: Promise<DatasetsResponse>
    fullName: Promise<DatasetsResponse>
    spec.typeScript:
      - uid: '!Promise:interface'
        name: Promise
        fullName: Promise
      - name: <
        fullName: <
      - uid: '@google-cloud/bigquery!DatasetsResponse:type'
        name: DatasetsResponse
        fullName: DatasetsResponse
      - name: '>'
        fullName: '>'
  - uid: '@google-cloud/bigquery!GetDatasetsOptions:type'
    name: GetDatasetsOptions
  - uid: '@google-cloud/bigquery!DatasetsCallback:type'
    name: DatasetsCallback
  - uid: '@google-cloud/bigquery!BigQuery#getDatasetsStream~0:complex'
    name: '(options?: GetDatasetsOptions) => ResourceStream<Dataset>'
    fullName: '(options?: GetDatasetsOptions) => ResourceStream<Dataset>'
    spec.typeScript:
      - name: '(options?: '
        fullName: '(options?: '
      - uid: '@google-cloud/bigquery!GetDatasetsOptions:type'
        name: GetDatasetsOptions
        fullName: GetDatasetsOptions
      - name: ') => '
        fullName: ') => '
      - uid: '@google-cloud/paginator!ResourceStream:class'
        name: ResourceStream
        fullName: ResourceStream
      - name: <
        fullName: <
      - uid: '@google-cloud/bigquery!~Dataset:class'
        name: Dataset
        fullName: Dataset
      - name: '>'
        fullName: '>'
  - uid: '@google-cloud/bigquery!BigQuery#getJobs~0:complex'
    name: Promise<GetJobsResponse>
    fullName: Promise<GetJobsResponse>
    spec.typeScript:
      - uid: '!Promise:interface'
        name: Promise
        fullName: Promise
      - name: <
        fullName: <
      - uid: '@google-cloud/bigquery!GetJobsResponse:type'
        name: GetJobsResponse
        fullName: GetJobsResponse
      - name: '>'
        fullName: '>'
  - uid: '@google-cloud/bigquery!GetJobsOptions:type'
    name: GetJobsOptions
  - uid: '@google-cloud/bigquery!GetJobsCallback:type'
    name: GetJobsCallback
  - uid: '@google-cloud/bigquery!BigQuery#getJobsStream~0:complex'
    name: '(options?: GetJobsOptions) => ResourceStream<Job>'
    fullName: '(options?: GetJobsOptions) => ResourceStream<Job>'
    spec.typeScript:
      - name: '(options?: '
        fullName: '(options?: '
      - uid: '@google-cloud/bigquery!GetJobsOptions:type'
        name: GetJobsOptions
        fullName: GetJobsOptions
      - name: ') => '
        fullName: ') => '
      - uid: '@google-cloud/paginator!ResourceStream:class'
        name: ResourceStream
        fullName: ResourceStream
      - name: <
        fullName: <
      - uid: '@google-cloud/bigquery!~Job:class'
        name: Job
        fullName: Job
      - name: '>'
        fullName: '>'
  - uid: '@google-cloud/bigquery!ValueType:type'
    name: ValueType
  - uid: '@google-cloud/bigquery!BigQuery.getTypeDescriptorFromProvidedType_~0:complex'
    name: string | ProvidedTypeStruct | ProvidedTypeArray
    fullName: string | ProvidedTypeStruct | ProvidedTypeArray
    spec.typeScript:
      - name: 'string | '
        fullName: 'string | '
      - uid: '@google-cloud/bigquery!ProvidedTypeStruct:interface'
        name: ProvidedTypeStruct
        fullName: ProvidedTypeStruct
      - name: ' | '
        fullName: ' | '
      - uid: '@google-cloud/bigquery!ProvidedTypeArray:type'
        name: ProvidedTypeArray
        fullName: ProvidedTypeArray
  - uid: '@google-cloud/bigquery!BigQueryInt:class'
    name: BigQueryInt
  - uid: '@google-cloud/bigquery!BigQuery#int~0:complex'
    name: string | number | IntegerTypeCastValue
    fullName: string | number | IntegerTypeCastValue
    spec.typeScript:
      - name: 'string | number | '
        fullName: 'string | number | '
      - uid: '@google-cloud/bigquery!IntegerTypeCastValue:type'
        name: IntegerTypeCastValue
        fullName: IntegerTypeCastValue
  - uid: '@google-cloud/bigquery!IntegerTypeCastOptions:interface'
    name: IntegerTypeCastOptions
  - uid: '@google-cloud/bigquery!BigQuery.int~0:complex'
    name: string | number | IntegerTypeCastValue
    fullName: string | number | IntegerTypeCastValue
    spec.typeScript:
      - name: 'string | number | '
        fullName: 'string | number | '
      - uid: '@google-cloud/bigquery!IntegerTypeCastValue:type'
        name: IntegerTypeCastValue
        fullName: IntegerTypeCastValue
  - uid: '@google-cloud/bigquery!~Job:class'
    name: Job
  - uid: '@google-cloud/bigquery!BigQuery.mergeSchemaWithRows_~0:complex'
    name: TableSchema | TableField
    fullName: TableSchema | TableField
    spec.typeScript:
      - uid: '@google-cloud/bigquery!TableSchema:type'
        name: TableSchema
        fullName: TableSchema
      - name: ' | '
        fullName: ' | '
      - uid: '@google-cloud/bigquery!TableField:type'
        name: TableField
        fullName: TableField
  - uid: '@google-cloud/bigquery!BigQuery.mergeSchemaWithRows_~1:complex'
    name: 'TableRow[]'
    fullName: 'TableRow[]'
    spec.typeScript:
      - uid: '@google-cloud/bigquery!TableRow:type'
        name: TableRow
        fullName: TableRow
      - name: '[]'
        fullName: '[]'
  - uid: '@google-cloud/bigquery!BigQuery.mergeSchemaWithRows_~2:complex'
    name: boolean | IntegerTypeCastOptions
    fullName: boolean | IntegerTypeCastOptions
    spec.typeScript:
      - name: 'boolean | '
        fullName: 'boolean | '
      - uid: '@google-cloud/bigquery!IntegerTypeCastOptions:interface'
        name: IntegerTypeCastOptions
        fullName: IntegerTypeCastOptions
  - uid: '@google-cloud/bigquery!BigQuery#query~0:complex'
    name: Promise<QueryRowsResponse>
    fullName: Promise<QueryRowsResponse>
    spec.typeScript:
      - uid: '!Promise:interface'
        name: Promise
        fullName: Promise
      - name: <
        fullName: <
      - uid: '@google-cloud/bigquery!QueryRowsResponse:type'
        name: QueryRowsResponse
        fullName: QueryRowsResponse
      - name: '>'
        fullName: '>'
  - uid: '@google-cloud/bigquery!QueryOptions:type'
    name: QueryOptions
  - uid: '@google-cloud/bigquery!BigQuery#query~1:complex'
    name: Promise<SimpleQueryRowsResponse>
    fullName: Promise<SimpleQueryRowsResponse>
    spec.typeScript:
      - uid: '!Promise:interface'
        name: Promise
        fullName: Promise
      - name: <
        fullName: <
      - uid: '@google-cloud/bigquery!SimpleQueryRowsResponse:type'
        name: SimpleQueryRowsResponse
        fullName: SimpleQueryRowsResponse
      - name: '>'
        fullName: '>'
  - uid: '@google-cloud/bigquery!Query:type'
    name: Query
  - uid: '@google-cloud/bigquery!QueryRowsCallback:type'
    name: QueryRowsCallback
  - uid: '@google-cloud/bigquery!SimpleQueryRowsCallback:type'
    name: SimpleQueryRowsCallback
  - uid: '@google-cloud/bigquery!QueryStreamOptions:type'
    name: QueryStreamOptions
  - uid: '@google-cloud/bigquery!BigQueryTime:class'
    name: BigQueryTime
  - uid: '@google-cloud/bigquery!BigQuery#time~0:complex'
    name: BigQueryTimeOptions | string
    fullName: BigQueryTimeOptions | string
    spec.typeScript:
      - uid: '@google-cloud/bigquery!BigQueryTimeOptions:interface'
        name: BigQueryTimeOptions
        fullName: BigQueryTimeOptions
      - name: ' | string'
        fullName: ' | string'
  - uid: '@google-cloud/bigquery!BigQuery.time~0:complex'
    name: BigQueryTimeOptions | string
    fullName: BigQueryTimeOptions | string
    spec.typeScript:
      - uid: '@google-cloud/bigquery!BigQueryTimeOptions:interface'
        name: BigQueryTimeOptions
        fullName: BigQueryTimeOptions
      - name: ' | string'
        fullName: ' | string'
  - uid: '@google-cloud/bigquery!BigQueryTimestamp:class'
    name: BigQueryTimestamp
  - uid: '@google-cloud/bigquery!BigQuery#timestamp~0:complex'
    name: Date | string
    fullName: Date | string
    spec.typeScript:
      - uid: '!Date:interface'
        name: Date
        fullName: Date
      - name: ' | string'
        fullName: ' | string'
  - uid: '@google-cloud/bigquery!BigQuery.timestamp~0:complex'
    name: Date | string
    fullName: Date | string
    spec.typeScript:
      - uid: '!Date:interface'
        name: Date
        fullName: Date
      - name: ' | string'
        fullName: ' | string'
  - uid: '@google-cloud/bigquery!~bigquery.IQueryParameter:type'
    name: bigquery.IQueryParameter
  - uid: '@google-cloud/bigquery!BigQuery.valueToQueryParameter_~0:complex'
    name: string | ProvidedTypeStruct | ProvidedTypeArray
    fullName: string | ProvidedTypeStruct | ProvidedTypeArray
    spec.typeScript:
      - name: 'string | '
        fullName: 'string | '
      - uid: '@google-cloud/bigquery!ProvidedTypeStruct:interface'
        name: ProvidedTypeStruct
        fullName: ProvidedTypeStruct
      - name: ' | '
        fullName: ' | '
      - uid: '@google-cloud/bigquery!ProvidedTypeArray:type'
        name: ProvidedTypeArray
        fullName: ProvidedTypeArray
